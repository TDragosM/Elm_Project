{"event":"runStart","testCount":"55","fuzzRuns":"100","globs":[],"paths":["A:\\Elm-Project\\Elm-Project-updated\\tests\\DateTests.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\EventCategoryTests.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\EventTests.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\IntervalTests.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\PersonalDetailsTests.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\RepoTests.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\Compare0.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\Compare1.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\Compare2.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\Compare3.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\Compare4.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\Compare5.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween0.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween1.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween2.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween3.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween4.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween5.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween6.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween7.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween8.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetween9.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetweenMonths0.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetweenMonths1.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Date\\MonthsBetweenMonths2.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Event\\Category\\AllSelected0.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Event\\Category\\IsEventCategorySelected0.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Event\\Category\\Set0.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Event\\Category\\Set1.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Interval\\Compare0.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Interval\\Compare1.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Interval\\Compare2.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Interval\\Compare3.elm","A:\\Elm-Project\\Elm-Project-updated\\tests\\VerifyExamples\\Model\\Interval\\Compare4.elm"],"initialSeed":"376158560164992"}
{"event":"testCompleted","status":"pass","labels":["DateTests","Model.Date module","Date view for year-only date contains the year"],"failures":[],"duration":"3"}
{"event":"testCompleted","status":"pass","labels":["DateTests","Model.Date module","Date view for full date contains the year"],"failures":[],"duration":"3"}
{"event":"testCompleted","status":"pass","labels":["DateTests","Model.Date module","Date view for full date contains the month"],"failures":[],"duration":"2"}
{"event":"testCompleted","status":"fail","labels":["EventCategoryTests","Model.Event.Category module","allSelected has all categories set"],"failures":[{"given":null,"message":"Expected all categories to be selected","reason":{"type":"Custom","data":"Expected all categories to be selected"}}],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["EventCategoryTests","Model.Event.Category module","set sets selected categories correctly"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["EventCategoryTests","Model.Event.Category module","view contains 4 checkboxes"],"failures":[{"given":null,"message":"▼ Query.fromHtml\n\n    <div>\n    </div>\n\n\n▼ Query.findAll [ class \"category-checkbox\" ]\n\n0 matches found for this query.\n\n\n▼ Query.count\n\nExpect.equal","reason":{"type":"Custom","data":"▼ Query.fromHtml\n\n    <div>\n    </div>\n\n\n▼ Query.findAll [ class \"category-checkbox\" ]\n\n0 matches found for this query.\n\n\n▼ Query.count\n\nExpect.equal"}}],"duration":"2"}
{"event":"testCompleted","status":"pass","labels":["EventCategoryTests","Model.Event.Category module","Main.update function updates the selected event categories state when a category is deselected"],"failures":[],"duration":"1"}
{"event":"testCompleted","status":"fail","labels":["EventCategoryTests","Model.Event.Category module","Main.update function updates the selected event categories state when a category is selected"],"failures":[{"given":null,"message":"Expected event category to be selected","reason":{"type":"Custom","data":"Expected event category to be selected"}}],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["EventCategoryTests","Model.Event.Category module","view contains 4 selected checkboxes"],"failures":[{"given":null,"message":"▼ Query.fromHtml\n\n    <div>\n    </div>\n\n\n▼ Query.findAll [ class \"category-checkbox\" ]\n\n0 matches found for this query.\n\n\n▼ Query.count\n\nExpect.equal","reason":{"type":"Custom","data":"▼ Query.fromHtml\n\n    <div>\n    </div>\n\n\n▼ Query.findAll [ class \"category-checkbox\" ]\n\n0 matches found for this query.\n\n\n▼ Query.count\n\nExpect.equal"}}],"duration":"3"}
{"event":"testCompleted","status":"pass","labels":["EventTests","Model.Event module","Event view has class event"],"failures":[],"duration":"2"}
{"event":"testCompleted","status":"fail","labels":["EventTests","Model.Event module","Children of Event view have the required fields"],"failures":[{"given":null,"message":"▼ Query.fromHtml\n\n    <div class=\"event\">\n        <h2 class=\"event-title\">\n            Test event\n        </h2>\n        <p>\n            Interval { end = Just (Date { month = Nothing, year = 2020 }), start = Date { month = Nothing, year = 2016 } }\n        </p>\n        <span class=\"event-category academic\">\n            Academic\n        </span>\n        <div class=\"event-description\">\n            Sample text\n        </div>\n        \n        <div class=\"tags\">\n        </div>\n    </div>\n\n\n▼ Query.has [ class \"event\", containing [ class \"event-title\" ] , containing [ class \"event-category\" ] , containing [ class \"event-interval\" ] , containing [ class \"event-description\" ]  ]\n\n✓ has class \"event\"\n✓ has containing [ class \"event-title\" ] \n✓ has containing [ class \"event-category\" ] \n✗ has containing [ class \"event-interval\" ] \n✓ has containing [ class \"event-description\" ] ","reason":{"type":"Custom","data":"▼ Query.fromHtml\n\n    <div class=\"event\">\n        <h2 class=\"event-title\">\n            Test event\n        </h2>\n        <p>\n            Interval { end = Just (Date { month = Nothing, year = 2020 }), start = Date { month = Nothing, year = 2016 } }\n        </p>\n        <span class=\"event-category academic\">\n            Academic\n        </span>\n        <div class=\"event-description\">\n            Sample text\n        </div>\n        \n        <div class=\"tags\">\n        </div>\n    </div>\n\n\n▼ Query.has [ class \"event\", containing [ class \"event-title\" ] , containing [ class \"event-category\" ] , containing [ class \"event-interval\" ] , containing [ class \"event-description\" ]  ]\n\n✓ has class \"event\"\n✓ has containing [ class \"event-title\" ] \n✓ has containing [ class \"event-category\" ] \n✗ has containing [ class \"event-interval\" ] \n✓ has containing [ class \"event-description\" ] "}}],"duration":"3"}
{"event":"testCompleted","status":"pass","labels":["EventTests","Model.Event module","Important events have class event-important"],"failures":[],"duration":"5"}
{"event":"testCompleted","status":"fail","labels":["EventTests","Model.Event module","sortByInterval sorts events correctly"],"failures":[{"given":null,"message":"List is not sorted","reason":{"type":"Custom","data":"List is not sorted"}}],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["IntervalTests","Model.Interval module","Interval view has class interval"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["IntervalTests","Model.Interval module","Interval view has text \"Present\" for open intervals"],"failures":[],"duration":"1"}
{"event":"testCompleted","status":"pass","labels":["IntervalTests","Model.Interval module","Interval view has length for full intervals"],"failures":[],"duration":"3"}
{"event":"testCompleted","status":"pass","labels":["PersonalDetailsTests","Model.PersonalDetails module","personalDetailsView tests","Personal details view includes the name"],"failures":[],"duration":"2"}
{"event":"testCompleted","status":"pass","labels":["PersonalDetailsTests","Model.PersonalDetails module","personalDetailsView tests","Personal details view includes the intro"],"failures":[],"duration":"2"}
{"event":"testCompleted","status":"pass","labels":["PersonalDetailsTests","Model.PersonalDetails module","personalDetailsView tests","Personal details view includes at least one contact"],"failures":[],"duration":"2"}
{"event":"testCompleted","status":"pass","labels":["PersonalDetailsTests","Model.PersonalDetails module","personalDetailsView tests","Personal details view includes at least one social link"],"failures":[],"duration":"5"}
{"event":"testCompleted","status":"pass","labels":["PersonalDetailsTests","Model.PersonalDetails module","personalDetailsView tests","Each social link has tag a"],"failures":[],"duration":"2"}
{"event":"testCompleted","status":"fail","labels":["RepoTests","Model.Repo module","Repo view has class repo"],"failures":[{"given":null,"message":"▼ Query.fromHtml\n\n    <div>\n        <div>\n            compiler\n        </div>\n        <div>\n            Description: Compiler for Elm, a functional language for reliable webapps.\n        </div>\n        <div>\n            URL: https://github.com/elm/compiler\n        </div>\n        <div>\n            Pushed At: 2021-09-18T14:00:17Z\n        </div>\n        <div>\n            Stars: 6625\n        </div>\n    </div>\n\n\n▼ Query.has [ class \"repo\" ]\n\n✗ has class \"repo\"","reason":{"type":"Custom","data":"▼ Query.fromHtml\n\n    <div>\n        <div>\n            compiler\n        </div>\n        <div>\n            Description: Compiler for Elm, a functional language for reliable webapps.\n        </div>\n        <div>\n            URL: https://github.com/elm/compiler\n        </div>\n        <div>\n            Pushed At: 2021-09-18T14:00:17Z\n        </div>\n        <div>\n            Stars: 6625\n        </div>\n    </div>\n\n\n▼ Query.has [ class \"repo\" ]\n\n✗ has class \"repo\""}}],"duration":"1"}
{"event":"testCompleted","status":"fail","labels":["RepoTests","Model.Repo module","Children of Repo view have the required fields"],"failures":[{"given":null,"message":"▼ Query.fromHtml\n\n    <div>\n        <div>\n            compiler\n        </div>\n        <div>\n            Description: Compiler for Elm, a functional language for reliable webapps.\n        </div>\n        <div>\n            URL: https://github.com/elm/compiler\n        </div>\n        <div>\n            Pushed At: 2021-09-18T14:00:17Z\n        </div>\n        <div>\n            Stars: 6625\n        </div>\n    </div>\n\n\n▼ Query.has [ class \"repo\", containing [ class \"repo-name\" ] , containing [ class \"repo-url\" ] , containing [ class \"repo-stars\" ]  ]\n\n✗ has class \"repo\"\n✗ has containing [ class \"repo-name\" ] \n✗ has containing [ class \"repo-url\" ] \n✗ has containing [ class \"repo-stars\" ] ","reason":{"type":"Custom","data":"▼ Query.fromHtml\n\n    <div>\n        <div>\n            compiler\n        </div>\n        <div>\n            Description: Compiler for Elm, a functional language for reliable webapps.\n        </div>\n        <div>\n            URL: https://github.com/elm/compiler\n        </div>\n        <div>\n            Pushed At: 2021-09-18T14:00:17Z\n        </div>\n        <div>\n            Stars: 6625\n        </div>\n    </div>\n\n\n▼ Query.has [ class \"repo\", containing [ class \"repo-name\" ] , containing [ class \"repo-url\" ] , containing [ class \"repo-stars\" ]  ]\n\n✗ has class \"repo\"\n✗ has containing [ class \"repo-name\" ] \n✗ has containing [ class \"repo-url\" ] \n✗ has containing [ class \"repo-stars\" ] "}}],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["RepoTests","Model.Repo module","Repo url should contain a link to the repo"],"failures":[{"given":null,"message":"▼ Query.fromHtml\n\n    <div>\n        <div>\n            compiler\n        </div>\n        <div>\n            Description: Compiler for Elm, a functional language for reliable webapps.\n        </div>\n        <div>\n            URL: https://github.com/elm/compiler\n        </div>\n        <div>\n            Pushed At: 2021-09-18T14:00:17Z\n        </div>\n        <div>\n            Stars: 6625\n        </div>\n    </div>\n\n\n▼ Query.find [ class \"repo-url\" ]\n\n0 matches found for this query.\n\n\n✗ Query.find always expects to find 1 element, but it found 0 instead.","reason":{"type":"Custom","data":"▼ Query.fromHtml\n\n    <div>\n        <div>\n            compiler\n        </div>\n        <div>\n            Description: Compiler for Elm, a functional language for reliable webapps.\n        </div>\n        <div>\n            URL: https://github.com/elm/compiler\n        </div>\n        <div>\n            Pushed At: 2021-09-18T14:00:17Z\n        </div>\n        <div>\n            Stars: 6625\n        </div>\n    </div>\n\n\n▼ Query.find [ class \"repo-url\" ]\n\n0 matches found for this query.\n\n\n✗ Query.find always expects to find 1 element, but it found 0 instead."}}],"duration":"3"}
{"event":"testCompleted","status":"pass","labels":["RepoTests","Model.Repo module","decodeRepo works correctly for repo with description"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["RepoTests","Model.Repo module","decodeRepo works correctly for repo without description"],"failures":[],"duration":"1"}
{"event":"testCompleted","status":"pass","labels":["RepoTests","Model.Repo module","sortByStars sorts repos correctly"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.Compare0","#compare: \n\n    Model.Date.compare (onlyYear 2019) (full 2020 Dec)\n    --> LT"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["VerifyExamples.Model.Date.Compare1","#compare: \n\n    Model.Date.compare (onlyYear 2020) (full 2020 Dec)\n    --> GT"],"failures":[{"given":null,"message":"Expect.equal","reason":{"type":"Equality","data":{"expected":"LT","actual":"GT","comparison":"Expect.equal"}}}],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.Compare2","#compare: \n\n    Model.Date.compare (onlyYear 2020) (onlyYear 2021)\n    --> LT"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.Compare3","#compare: \n\n    Model.Date.compare (full 2020 Jan) (full 2020 Dec)\n    --> LT"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.Compare4","#compare: \n\n    Model.Date.compare (full 2021 Dec) (full 2021 Jan)\n    --> GT"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.Compare5","#compare: \n\n    Model.Date.compare (full 2020 Jan) (full 2021 Jan)\n    --> LT"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween0","#monthsBetween: \n\n    monthsBetween (onlyYear 2020) (onlyYear 2022)\n    --> Just 24"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween1","#monthsBetween: \n\n    monthsBetween (onlyYear 2020) (onlyYear 2021)\n    --> Just 12"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween2","#monthsBetween: \n\n    monthsBetween (full 2020 Dec) (full 2021 Jan)\n    --> Just 1"],"failures":[],"duration":"1"}
{"event":"testCompleted","status":"fail","labels":["VerifyExamples.Model.Date.MonthsBetween3","#monthsBetween: \n\n    monthsBetween (full 2020 Jan) (onlyYear 2021)\n    --> Nothing"],"failures":[{"given":null,"message":"Expect.equal","reason":{"type":"Equality","data":{"expected":"Just 13","actual":"Nothing","comparison":"Expect.equal"}}}],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["VerifyExamples.Model.Date.MonthsBetween4","#monthsBetween: \n\n    monthsBetween (onlyYear 2020) (full 2021 Jan)\n    --> Nothing"],"failures":[{"given":null,"message":"Expect.equal","reason":{"type":"Equality","data":{"expected":"Just 11","actual":"Nothing","comparison":"Expect.equal"}}}],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween5","#monthsBetween: \n\n    monthsBetween (full 2021 Jan) (full 2020 Feb)\n    --> Just 11"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween6","#monthsBetween: \n\n    monthsBetween (full 2020 Jan) (full 2021 Feb)\n    --> Just 13"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween7","#monthsBetween: \n\n    monthsBetween (full 2020 Jan) (full 2020 Dec)\n    --> Just 11"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween8","#monthsBetween: \n\n    monthsBetween (full 2020 Mar) (full 2020 Jan)\n    --> Just 2"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetween9","#monthsBetween: \n\n    monthsBetween (full 2020 Jan) (full 2020 Feb)\n    --> Just 1"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetweenMonths0","#monthsBetweenMonths: \n\n    monthsBetweenMonths Apr Jan\n    --> 3"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetweenMonths1","#monthsBetweenMonths: \n\n    monthsBetweenMonths Jan Apr\n    --> 3"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Date.MonthsBetweenMonths2","#monthsBetweenMonths: \n\n    monthsBetweenMonths Jan Jan\n    --> 0"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["VerifyExamples.Model.Event.Category.AllSelected0","#allSelected: \n\n    isEventCategorySelected Academic allSelected\n    --> True"],"failures":[{"given":null,"message":"Expect.equal","reason":{"type":"Equality","data":{"expected":"False","actual":"True","comparison":"Expect.equal"}}}],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["VerifyExamples.Model.Event.Category.IsEventCategorySelected0","#isEventCategorySelected: \n\n    isEventCategorySelected Academic allSelected\n    --> True"],"failures":[{"given":null,"message":"Expect.equal","reason":{"type":"Equality","data":{"expected":"False","actual":"True","comparison":"Expect.equal"}}}],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["VerifyExamples.Model.Event.Category.Set0","#set: \n\n    allSelected |> set Academic False |> isEventCategorySelected Work\n    --> True"],"failures":[{"given":null,"message":"Expect.equal","reason":{"type":"Equality","data":{"expected":"False","actual":"True","comparison":"Expect.equal"}}}],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Event.Category.Set1","#set: \n\n    allSelected |> set Academic False |> isEventCategorySelected Academic\n    --> False"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"fail","labels":["VerifyExamples.Model.Interval.Compare0","#compare: \n\n    Model.Interval.compare (withDurationMonths 2019 Date.Jan 2) (open (Date.onlyYear 2019))\n    --> LT"],"failures":[{"given":null,"message":"Expect.equal","reason":{"type":"Equality","data":{"expected":"GT","actual":"LT","comparison":"Expect.equal"}}}],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Interval.Compare1","#compare: \n\n    Model.Interval.compare (withDurationMonths 2019 Date.Feb 2) (withDurationMonths 2019 Date.Jan 2)\n    --> GT"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Interval.Compare2","#compare: \n\n    Model.Interval.compare (withDurationMonths 2019 Date.Jan 2) (withDurationMonths 2019 Date.Jan 2)\n    --> EQ"],"failures":[],"duration":"1"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Interval.Compare3","#compare: \n\n    Model.Interval.compare (oneYear 2019) (withDurationYears (Date.onlyYear 2020) 2)\n    --> LT"],"failures":[],"duration":"0"}
{"event":"testCompleted","status":"pass","labels":["VerifyExamples.Model.Interval.Compare4","#compare: \n\n    Model.Interval.compare (oneYear 2019) (oneYear 2020)\n    --> LT"],"failures":[],"duration":"0"}
{"event":"runComplete","passed":"39","failed":"16","duration":"302","autoFail":null}
